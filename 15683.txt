#include<bits/stdc++.h>

using namespace std;

struct cctv{

	int x, y;
	int type;
};
int M, N, ret;
int Map[8][8]; //맵
vector<cctv> v;
int rot_size[] = { 4, 2, 4, 4, 1 };

void update(int dir, cctv cc) {

	dir %= 4;

	//복 동 남 서 방향으로 설정 
	//북쪽으로 뻗는다 
	if (dir == 0) {
		for (int x = cc.x; x >= 0; x--)
		{
			if (Map[x][cc.y] == 6)break;

			// -1은 cctv가 봤다고 표시 
			Map[x][cc.y] = -1;
		}
	}
	else if (dir == 1) { //동
		for (int y = cc.y; y < M; y++)
		{
			if (Map[cc.x][y] == 6) break;

			Map[cc.x][y] = -1;
		}
	}
	else if (dir == 2) {  // 남 
		for (int x = cc.x; x < N; x++)
		{
			if (Map[x][cc.y] == 6) break;

			Map[x][cc.y] = -1;
		}
	}
	else if (dir == 3) { //서
		for (int y = cc.y; y >= 0; y--)
		{
			if (Map[cc.x][y] == 6) break;

			Map[cc.x][y] = -1;
		}
	}
}
void dfs(int idx) {
	if (idx == v.size()) {
		int cnt = 0;
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < M; j++)
			{
				if (Map[i][j] == 0) cnt++;
			}
		}
		if (cnt < ret) ret = cnt;
		return;
	}

	int backup[8][8];
	int type = v[idx].type;

	for (int i = 0; i < rot_size[type]; i++)
	{
		memcpy(backup, Map, sizeof(Map));

		//1번 cctv
		if (type == 0) {
			update(i, v[idx]);
		}
		//2번 cctv
		else if (type == 1) {
			update(i, v[idx]);
			update(i + 2, v[idx]);
		}
		else if (type == 2) {
			update(i, v[idx]);
			update(i + 1, v[idx]);
		}
		else if (type == 3) {
			update(i, v[idx]);
			update(i + 1, v[idx]);
			update(i + 2, v[idx]);
		}
		else if (type == 4) {
			update(i, v[idx]);
			update(i + 1, v[idx]);
			update(i + 2, v[idx]);
			update(i + 3, v[idx]);
		}
		dfs(idx + 1);
		memcpy(Map, backup, sizeof(backup));
	}
}
int main() {

	//행 렬 
	cin >> N >>M;
	for (int i = 0; i < N; i++)
	{
		for(int j = 0 ; j < M; ++j)
		{
			cin >> Map[i][j];
			if (Map[i][j] >= 1 && Map[i][j] <= 5) {
				--Map[i][j];
				v.push_back({ i, j, Map[i][j] });
			}
		}
	}
	ret = 1000;
	dfs(0);
	cout << ret;
	return 0;
}