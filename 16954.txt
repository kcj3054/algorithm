#include <iostream>
#include <queue>

using namespace std;

struct point {
	int x;
	int y;
	int time;
};
int dx[] = { 0, -1, -1, -1, 0, 1, 1, 1, 0 };
int dy[] = { 0, -1, 0, 1, 1, 1, 0, -1, -1 };
char map[8][8];
bool visited[8][8][9];
//목표 -> 0, 7

void move() {
	for (int i = 0; i <= 7; i++)
	{
		map[7][i] = '.';
	}

	for (int i = 6; i >= 0; i--)
	{
		for (int j = 0; j <= 7; j++)
		{
			if (map[i][j] == '#') {
				map[i + 1][j] = map[i][j];
				map[i][j] = '.';
			}
		}
	}
}
int bfs() {
	queue<point> q;
	q.push({ 7, 0, 0 });
	visited[7][0][0] = 1;

	while (!q.empty())
	{
		int size = q.size();
		for (int i = 0; i < size; i++)
		{
			int x = q.front().x;
			int y = q.front().y;
			int t = q.front().time;
			q.pop();
			if (t >= 8 || (x == 0 && y == 7)) return 1;

			for (int k = 0; k < 9; k++)
			{
				int nx = x + dx[k];
				int ny = y + dy[k];

				if (nx < 0 || ny < 0 || nx >= 8 || ny >= 8 || visited[nx][ny][t + 1]) continue;
				if (map[nx][ny] == '#')continue;
				if (nx - 1 >= 0 && map[nx - 1][ny] == '#')continue;////////////다음 위에 벽돌이있나?
				q.push({ nx, ny, t + 1 });
				visited[nx][ny][t + 1] = 1;
			}
		}
		move();
	}
	return 0;
}
int main() {
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			cin >> map[i][j];
		}
	}
	cout << bfs();
	return 0;
}