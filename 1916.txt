#include <bits/stdc++.h>


using namespace std;

int n, m;
vector<pair<int, int>>  graph[1001];
int visited[1001];
int dis[1001];
int s, d;
void daik(int s) {
	priority_queue<pair<int, int>, vector<pair<int, int>> ,greater<pair<int, int>>> pq;

	pq.push({ 0, s });
	dis[s] = 0;

	while (!pq.empty())
	{
		int cost = pq.top().first;
		int now = pq.top().second;
		pq.pop();

		if (dis[now] < cost) continue;

		for (int i = 0; i < graph[now].size(); i++)
		{
			int next = graph[now][i].first;
			int nextDis =  cost + graph[now][i].second;  // graph[now][i].second는 그 정점의 간선 값 
			// 현재노드 비용 + 간섭값 => 다음 노드 비용 

			if (dis[next] > nextDis) {
				dis[next] = nextDis;
				pq.push({ dis[next], next });
			}
		}
	}
}
int main() {

	cin >> n >> m;
	
	for (int i = 0; i < m; i++)
	{
		int a = 0, b = 0, c = 0; cin >> a >> b >> c;
		graph[a].push_back({ b, c });
	}
	fill(dis, dis + 1001, INT_MAX);
	cin >> s >> d;

	daik(s);
	cout << dis[d];

	return 0;
}s