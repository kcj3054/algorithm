#include <iostream>
#include <vector>
#include <queue>

using namespace std;


int map[300][300];
bool visited[300][300];
int m, n, cnt;
int dx[] = { -1, -1, 0, 1, 1, 1, 0, -1 };
int dy[] = { 0, 1, 1, 1, 0, -1, -1, -1 };

void bfs(int x, int y) {
	queue<pair<int, int>> q;
	q.push({ x, y });
	visited[x][y] = 1;

	while (!q.empty())
	{
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		for (int i = 0; i < 8; i++)
		{
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx < 0 || ny < 0 || nx >= m || ny >= n || map[nx][ny] == 0) continue;
			if (visited[nx][ny]) continue;

			if (map[nx][ny] == 1) {
				q.push({ nx, ny });
				visited[nx][ny] = 1;
			}
		}
	}
}
int main() {
	cin >> m >> n;

	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; ++j)
		{
			cin >> map[i][j];
		}
	}
	
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (!visited[i][j] && map[i][j] == 1) {
				bfs(i, j);
				cnt++;
			}
		}
	}
	cout << cnt;
	return 0;
}