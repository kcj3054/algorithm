#include <iostream>
#include <queue>
#include <string>
using namespace std;

int n, m;
char maze[51][51];
int visited[51][51][1 << 6];
pair<int, int> start;
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };

struct point
{
	int x;
	int y;
	int cnt;
	int key;
};
bool range(int x, int y) {
	if (x < 0 || y < 0 || x >= n || y >= m) return false;
	return true;
}
int bfs(int x, int y) {

	queue<point> q;
	q.push({ x, y, 0, 0});
	visited[x][y][0] = 1;

	while (!q.empty())
	{
		int nowX = q.front().x;
		int nowY = q.front().y;
		int cnt = q.front().cnt;
		int key = q.front().key;

		//cout << nowX << " " << nowY << endl;
		
		q.pop();

		if (maze[nowX][nowY] == '1') {
			return cnt;
		}
		for (int i = 0; i < 4; i++)
		{
			int nx = nowX + dx[i];
			int ny = nowY + dy[i];
			//cout << nx << " : " << ny << endl;
			//방문 범위 체크 
			if (visited[nx][ny][key]) continue;
			if (range(nx, ny) == 0) continue;
			
			if (nx < 0 || ny < 0 || nx >= n || ny >= m) continue;

			if (maze[nx][ny] == '.' || maze[nx][ny] == '1') {
				q.push({ nx, ny, cnt + 1, key });
				visited[nx][ny][key] = 1;
			}
			//열쇠줍기 
			else if (maze[nx][ny] >= 'a' && maze[nx][ny] <= 'f') {
				// 현재 4방향 탐색에서 다른곳에 주운키의 영향을 받게 해서는 안된다 
				int a = key | (1 << maze[nx][ny] - 'a');  // 열쇠 주울때 현 상태 다음상태에서 주운걸 영향이 가야한다 
				q.push({ nx, ny, cnt + 1, a });
				visited[nx][ny][key] = 1;
			}
			//열쇠로 문열기 
			else if (maze[nx][ny] >= 'A' && maze[nx][ny] <= 'F') {
				int a = key & (1 << maze[nx][ny] - 'A');
				if (a != 0) {
					visited[nx][ny][key] = 1;
					q.push({ nx, ny, cnt + 1, key });
				}
			}
		}
	}
	return -1;
}
int main() {

	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		string s; cin >> s;
		for (int j = 0; j < m; ++j)
		{
			maze[i][j] = s[j];
			if (maze[i][j] == '0') {
				start.first = i;
				start.second = j;
				maze[i][j] = '.';
			}
		}
	}
	/*
	//맵 잘 나오나 확인 	
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			cout << map[i][j];
		}
		cout << endl;
	}*/
	cout << bfs(start.first, start.second) << endl;
	return 0;
}

/*
1 7
f0.F..1
*/