#include <iostream>
#include <queue>

using namespace std;
struct point {
	int x;
	int y;
	int cnt;
	bool gram;
};
int n, m, t;
int map[101][101];
int visited[101][101][2];
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };

void Input() {
	cin >> n >> m >> t;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; ++j)
		{
			cin >> map[i][j];
		}
	}
}
int bfs() {
	queue<point> q;
	q.push({ 0, 0, 0, false });
	visited[0][0][0] = 1;
	while (!q.empty())
	{
		int x = q.front().x;
		int y = q.front().y;
		int cnt = q.front().cnt;
		bool gram = q.front().gram;
		q.pop();
		if (map[x][y] == 2) gram = true;
		if (x == n - 1 && y == m - 1) {
			return cnt;
		}
		//cout << x << "," << y << endl;
		for (int i = 0; i < 4; i++)
		{
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx < 0 || ny < 0 || nx >= n || ny >= m || visited[nx][ny][gram] != 0)continue;
			if (gram == true) {
				q.push({ nx, ny, cnt + 1, true });
				visited[nx][ny][gram] = 1;
			}
			else
			{
				if (map[nx][ny] == 1)continue;
				q.push({ nx, ny, cnt + 1, false }); 
				visited[nx][ny][gram] = 1;
			}
		}
	}
	return 20000;
}
int main() {

	Input();
	//memset(visited, -1, sizeof(visited));
	int ans = bfs();
	if (ans >= 0 && ans <= t) cout << ans << endl;
	else cout << "Fail" << endl;
	return 0;
}
/*
3 4 100
0 0 0 0
1 1 1 1
0 0 2 0
*/