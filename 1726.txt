#include <iostream>
#include <queue>
#include <vector>
#include <memory.h>

using namespace std;

struct point {
	int x;
	int y;
	int dir;
};
int map[200][200];
int visited[200][200][4];

//문제꺼를 우리가 정한 방향을 ㅗ변환 
// 동 서 남 북
int conv[] = {0, 0, 2, 1, 3};
//   |  문제 |  dxdy
// 동 |  1  |  0
// 서 |  2  |  2
// 남 |  3  |  1
// 북 |  4  |  3
// conv[문제] -> dxdy
//  문제 서 2 - > dx dy 2
//conv를 dx dy에 맞춰서 변환 
//dx[0] -> conv[0] 0 , 
//dx[1] -> 
// 동 남 서 북
int dx[] = { 0, 1, 0, -1 };
int dy[] = { 1, 0, -1, 0 };
int n, m, cnt;
point start;
point _end;

bool range(int x, int y) {
	if (x < 0 || y < 0 || x >= m || y >= n) return false;
	return true;
}

int bfs(int x, int y, int dir) {

	queue<point> q;
	q.push({ x, y, dir });
	visited[x][y][dir] = 0;

	while (!q.empty())
	{
		point now = q.front();
		q.pop();

		if (now.x == _end.x && now.y == _end.y && now.dir == _end.dir) {
			return visited[now.x][now.y][now.dir];
		}

		for (int i = 1; i <= 3; i++)
		{
			int nx = now.x + dx[now.dir] * i;
			int ny = now.y + dy[now.dir] * i;

			if (!range(nx, ny)) continue;
			if (map[nx][ny] == 1) break; //벽 break;
			if (visited[nx][ny][now.dir] != -1) continue;

			q.push({ nx, ny, now.dir });
			visited[nx][ny][now.dir] = visited[now.x][now.y][now.dir] + 1;
		}

		//방향 전환 언제하는거지 
		int nd = (now.dir + 1) % 4;
		// 
		if (visited[now.x][now.y][nd] == -1) {
			visited[now.x][now.y][nd] = visited[now.x][now.y][now.dir] + 1;
			q.push({ now.x, now.y, nd });
		}
		//거꾸로 
		nd = (now.dir + 3) % 4;
		if (visited[now.x][now.y][nd] == -1) {
			visited[now.x][now.y][nd] = visited[now.x][now.y][now.dir] + 1;
			q.push({ now.x, now.y, nd });
		}
	}
}

// (-1) % 4 == ?
// (-5) % 4 == ?
// n  -1  + 4

// n 을 m으로 나눈 나머지
// (n % m + m) % m
// 
int main() {

	cin >> m >> n;
	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; ++j)
		{
			cin >> map[i][j];
		}
	}

	int a = 0, b = 0, c = 0;
	cin >> a >> b >> c;
	start.x = a - 1;
	start.y = b - 1;

	//정한 방향으로 
	start.dir = conv[c];

	cin >> a >> b >> c;
	_end.x = a - 1;
	_end.y = b - 1;
	_end.dir = conv[c];

	memset(visited, -1, sizeof(visited));
	

	cout << bfs(start.x, start.y, start.dir) << endl;
	return 0;
}