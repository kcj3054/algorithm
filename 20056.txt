#include <bits/stdc++.h>

using namespace std;

struct point {

	int r;
	int c;
	int m;
	int s;
	int d;
};


int n, mm, k;

int dx[] = { -1, -1, 0, 1, 1, 1, 0, -1 };
int dy[] = { 0, 1, 1, 1, 0, -1, -1, -1 };
int r, c, m, s, d;
vector<int> Map[51][51];
vector<point> ball;

void move() {
	vector<int> new_map[51][51];

	for (int i = 0; i < ball.size(); i++)
	{
		int dir = ball[i].d;
		int speed = (ball[i].s % n);

		int nx = (ball[i].r + (dx[dir] * speed) + n) % n;
		int ny = (ball[i].c + (dy[dir] * speed) + n) % n;

		new_map[nx][ny].push_back(i);
		ball[i].r = nx;
		ball[i].c = ny;

	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; ++j)
		{
			Map[i][j] = new_map[i][j];
		}
	}
}
void sum() {

	vector<point> new_ball;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (Map[i][j].size() == 0) continue;

			if (Map[i][j].size() == 1) {

				//볼을 새로운볼에 넣기 
				int index = Map[i][j][0];
				new_ball.push_back(ball[index]);

				continue;
			}

			//합치고 나누기 

			int sum_m = 0, sum_s = 0;
			bool odd = true, even = true;


			//볼이 2이상인 경우 
			for (int k = 0; k < Map[i][j].size(); k++)
			{
				int index = Map[i][j][k];
				sum_m += ball[index].m;
				sum_s += ball[index].s;

				if (ball[index].d % 2 == 0) {
					odd = false;
				}
				else even = false;
			}

			//질량은 ->  질량합 /5
			//속도는 -> 속도합/ 파이어볼의 갯수 

			sum_m /= 5;
			sum_s /= Map[i][j].size();

			//질량이 0이면 소멸한다 
			if (sum_m == 0) continue;

			//파이어볼이 4개로 나뉘어진다
			for (int k = 0; k < 4; k++)
			{
				//모두 짝수이거나 홀수이면 0 2 4 6
				if (odd == true || even == true) {
					new_ball.push_back({ i, j, sum_m, sum_s,  k * 2 });
				}
				//아니면 1 3 5 7 
				else new_ball.push_back({ i, j, sum_m, sum_s,  k * 2 + 1 });
			}
		}
	}
	//다시 볼에 삽입 
	ball = new_ball;

}
int main() {


	cin >> n >> mm >> k;

	for (int i = 0; i < mm; i++) {
		cin >> r >> c >> m >> s >> d;
		ball.push_back({ r, c, m, s, d });
		Map[r][c].push_back(i);
	}


	int ret = 0;
	while (k--)
	{
		move();
		sum();
	}

	for (int i = 0; i < ball.size(); i++)
	{
		ret += ball[i].m;
	}

	cout << ret;

	return 0;
}