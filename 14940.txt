#include <iostream>
#include <vector>
#include <memory.h>
#include <queue>

using namespace std;

struct point
{
	int x;
	int y;
};
int n, m;
vector<int> v[1001];
int visited[1001][1001];
pair<int, int> goal;
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, 1 };

int bfs(int x, int y) {
	
	queue<point> q;
	q.push({ x, y});
	visited[x][y] = 0;
	
	while (!q.empty())
	{
		int x = q.front().x;
		int y = q.front().y;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (v[nx][ny] == 0) continue;
			if (visited[nx][ny] == -1 ) {
				if (nx >= 0 && ny >= 0 && nx < n && ny < m) {
					q.push({ nx, ny });
					visited[nx][ny] = visited[x][y] + 1;
				}
			}
		}
	}
	return -1;
}
int main() {

	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; ++j)
		{
			int a = 0; cin >> a;
			v[i].push_back(a);
			
			if (v[i][j] == 2) {
				goal.first = i; goal.second = j;
				v[i][j] = 0;
			}

		} 
	}

	memset(visited, -1, sizeof(visited));
	bfs(goal.first, goal.second);

	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			if (v[i][j] == 1 && visited[i][j] == 0) cout << " -1" << " ";
			else cout << visited[i][j] << " ";
		}
		cout << endl;
	}
	return 0;
}
/*
15 15
2 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 0 0 0 0 1
1 1 1 1 1 1 1 1 1 1 0 1 1 1 1
1 1 1 1 1 1 1 1 1 1 0 1 0 0 0
1 1 1 1 1 1 1 1 1 1 0 1 1 1 1

*/