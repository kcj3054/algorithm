// 이분 그래프 양쪽을 서로 다른색으로 구분해줌 
#include <iostream>
#include <vector>
#include <algorithm>
#include <memory.h>
#include <queue>

using namespace std;

#define MAX 20001
#define red 1 
#define blue 2 
vector<int> graph[MAX];
bool visit[MAX];
int v, e;

bool dfs(int x) {
	if (!visit[x]) visit[x] = 1;

		for (int j = 0; j < graph[x].size(); ++j)
		{
			int next = graph[x][j];
			if (visit[x] == red) next = blue;
			else next = red;
			dfs(next);
		}
}
bool Bipartite() {
	for (int i = 0; i < v; i++)
	{
		for (int j = 0; j < graph[i].size(); ++j)
		{
			int next = graph[i][j];
			if (visit[i] == visit[next]) return 0;
		}
	}
	return true;
}
void solve() {
	memset(graph, 0, sizeof(graph));
	memset(visit, 0, sizeof(visit));
	cin >> v >> e;
	for (int i = 0; i < e; i++)
	{
		int a = 0, b = 0; cin >> a >> b;
		graph[a].push_back(b);
		graph[b].push_back(a);
	}
	
	for (int i = 0; i < v; i++)
	{
		if (!visit[i]) dfs(i);
	}

	if (Bipartite()) cout << "YES";
	else cout << "NO";
}
int main() {
	int t = 0;
	cin >> t;
	while (--t)
	{
		solve();
	}
	return 0;
}