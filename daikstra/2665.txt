#include <iostream>
#include <queue>
#include <string>

using namespace std;

int n;
int graph[51][51];
int visited[51][51];
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };

void bfs(int x, int y) {

	queue<pair<int, int>> q;
	q.push({ x, y });
	visited[x][y] = 0;

	while (!q.empty())
	{
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || ny < 0 || nx >= n || ny >= n) continue;

			//흰방일경우
			if (graph[nx][ny] == 1) {
				if (visited[nx][ny] > visited[x][y]) {
					visited[nx][ny] = visited[x][y];
					q.push({ nx, ny });
				}
			}
			//검은 방 
			else
			{
				if (visited[nx][ny] > visited[x][y] + 1) {
					visited[nx][ny] = visited[x][y] + 1;
					q.push({ nx, ny });
				}
			}
		}
	}
}

int main() {
	cin >> n;
	string str;
	for (int i = 0; i < n; ++i) {
		cin >> str;
		for (int j = 0; j < str.size(); j++)
		{
			graph[i][j] = str[j] -'0';               /// check!!!!! graph에 숫자인데 string으로 받고 문자로 넣어서 틀렸다 !! 
		}
	}

	for (int i = 0; i < 51; i++)
	{
		for (int j = 0; j < 51; ++j)
		{
			visited[i][j] = 987654321;
		}
	}
	bfs(0, 0);
	cout << visited[n - 1][n - 1];
	return 0;
}
/*
1. /// check!!!!! graph에 숫자인데 string으로 받고 문자로 넣어서 틀렸다 !!
2. visited[a][b] = c, (a, b)까지 갔을때 비용이 c이다
갱신될 수도 있으니 갔던 곳도 간다 
*/