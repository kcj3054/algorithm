//3차원 배열 활용의 전형적인문제 !!
#include <iostream>
#include <queue>
#include <string>

#define _CRT_SECURE_NO_WARNINGS

using  namespace std;

struct point {
	int x;
	int y;
	int cnt;
};
int n, m;
int map[2000][2000];
int visited[2000][2000][2];
int dx[] = {-1, 0, 1, 0};
int dy[] = { 0, 1, 0, -1 };
void Input() {
	cin >> n >> m;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; ++j)
		{
			scanf("%1d", &map[i][j]);
		}
	}
}
int bfs() {
	queue<point> q;
	q.push({ 0, 0, 1 });
	visited[0][0][1] = 1;
	while (!q.empty())
	{
		int x = q.front().x;
		int y = q.front().y;
		int cnt = q.front().cnt;
		q.pop();

		if (x == n - 1&& y == m - 1) {
			return visited[x][y][cnt];
		}
		for (int i = 0; i < 4; i++)
		{
			int nx = x + dx[i];	
			int ny = y + dy[i];

			if (nx < 0 || ny < 0 || nx >= n || ny >= m || visited[nx][ny][cnt]) continue;

			if (map[nx][ny] == 1 && cnt == 1) {
				q.push({ nx, ny, 0 });
				visited[nx][ny][0] = visited[x][y][cnt] + 1;
			}
			else if(map[nx][ny] == 0) // 갈 수 있을때 
			{
				q.push({ nx, ny, cnt });
				visited[nx][ny][cnt] = visited[x][y][cnt] + 1;
			}
		}
	}
	return -1;
}
int main() {
	Input();
	cout <<bfs() << endl;
	return 0;
}