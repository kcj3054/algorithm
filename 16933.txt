#include <iostream>
#include <queue>
#include <string>

#define _CRT_SECURE_NO_WARNINGS

using  namespace std;
//day true -> 낮을 의미, false는 밤을 의미 ,, 밤, 낮이동가능 but 벽은 낮에만 부술 수 있다 
//visited 마지막 1을 낮으로  
struct point {
	int x;
	int y;
	int cnt;
	bool day;
};
int n, m, k;
int map[1001][1001];
int visited[1001][1001][11][2];
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };
void Input() {
	cin >> n >> m >> k;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; ++j)
		{
			scanf("%1d", &map[i][j]);
		}
	}
}
int bfs() {
	queue<point> q;
	q.push({ 0, 0, k, true });
	visited[0][0][k][1] = 1;
	while (!q.empty())
	{
		int x = q.front().x;
		int y = q.front().y;
		int cnt = q.front().cnt;
		bool day = q.front().day;
		q.pop();

		if (x == n - 1 && y == m - 1) {
			return visited[x][y][cnt][day];
		}
		for (int i = 0; i < 4; i++)
		{
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || ny < 0 || nx >= n || ny >= m ) continue;
			if (map[nx][ny] == 1 && cnt >= 1 ) {
				if (day == true && visited[nx][ny][cnt - 1][false] == 0) {
					q.push({ nx, ny, cnt - 1, false });
					visited[nx][ny][cnt - 1][false] = visited[x][y][cnt][true] + 1;
				}
				else if(day == false && visited[x][y][cnt][true] == 0) {
					q.push({ x, y, cnt, true}); //벽인데 밤인경우 
					visited[x][y][cnt][true] = visited[x][y][cnt][false] + 1;
				}
			}
			else if (map[nx][ny] == 0 && visited[nx][ny][cnt][!day] == 0) // 갈 수 있을때 
			{
				q.push({ nx, ny, cnt, !day });
				visited[nx][ny][cnt][!day] = visited[x][y][cnt][day] + 1;
			}
		}
	}
	return -1;
}
int main() {
	Input();
	cout << bfs() << endl;
	return 0;
}