#include <iostream>
#include <queue>
#include <vector>

using namespace std;

typedef pair<int, int> p;
vector<pair<int, int>> map1[1001];
vector<pair<int, int>> map2[1001];
priority_queue<p, vector<p>, greater<p>> pq;
int n, m, x;
int d[1001];
int ans[1001]; // 최단거리 값들 저장
void daik(int node, vector<p> a[1001]) {

	pq.push({ 0, node });
	d[x] = 0;
	while (!pq.empty())
	{
		int cost = pq.top().first;
		int now = pq.top().second;
		pq.pop();

		for (int i = 0; i < a[now].size(); i++)
		{
			int next = a[now][i].first;
			int nextCost = a[now][i].second + cost;

			if (d[next] > nextCost) {
				d[next] = nextCost;
				pq.push({ nextCost, next });
			}
		}
	}
	for (int i = 1; i <= n; i++)
	{
		ans[i] += d[i];
	}
}
int main() {

	cin >> n >> m >> x;
	for (int i = 1; i <= m; i++)
	{
		int u, v, c;
		cin >> u >> v >> c;
		map1[u].push_back({ v, c });
		map2[v].push_back({ u, c });
	}
	for (int i = 1; i <= 1000; i++) d[i] = 987654321;

	daik(x, map1);
	for (int i = 1; i <= 1000; i++) d[i] = 987654321;
	daik(x, map2);

	int _max = 0;
	for (int i = 1; i <= n; i++)
	{
		if (ans[i] > _max) _max = ans[i];
	}
	cout << _max;
	return 0;
}